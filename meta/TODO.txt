Encapsulation annotations.
* Add support for method encapsulation (methods map to attributes with $Type right now).

Specialization.
* `sup std::vector::Vec[std::string::Str]` applies to all `std::vector::Vec` types.
* Generic arguments must match their parameters exactly for sup Type[T=T] to work (generic type regeneration)

Equality methods.
* Should all be (&Self, &Self), not (&Self, Self) conventions?
* Change a == b at the compiler level into a == &b?

Smart pointers.
* Attribute access to deferred types

Types.
* Postfix types cannot be used as parameters, return types or attributes.

Arrays
* Indexing operator should return `Opt[T]` not `T`?

Function types.
* Mostly requires closures
* Superimpose function types.

Generators.
* For `GenOnce`, only one `gen` expression should be allowed.
* Auto `.res()` on `gen` value being received for `GenOnce`?

Lambdas.
* Mutable captures? Like `mut a: &mut T` but for a capture? `mut &mut a` is not happening.
