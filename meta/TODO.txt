Encapsulation annotations.
* Add support for method encapsulation (methods map to attributes with $Type right now).

Specialization.
* `sup std::vector::Vec[std::string::Str]` applies to all `std::vector::Vec` types.
* Generic arguments must match their parameters exactly for sup Type[T=T] to work (generic type regeneration)

Equality methods.
* Should all be (&Self, &Self), not (&Self, Self) conventions?
* Change a == b at the compiler level into a == &b?

Smart pointers.
* Attribute access to deferred types

Types.
* Postfix types need to be usable as parameters, return types or attributes.
* Add testing for the IdentifierDuplicationError.

Arrays
* Indexing operator should return `Opt[T]` not `T`? Must be compatible with generators.

Generators.
* For `GenOnce`, only one `gen` expression should be allowed.
* Auto `.res()` on `gen` value being received for `GenOnce`?
* Any type being yielded to (`cor ... -> Iterator[T]`) etc, must have no attributes.

Aliasing.
* Allow `use std::iterator::(IterMov, IterMut, IterRef)` in one statement (check syntax).
* Allow aliasing namespaces, things like `use std::{iterator::{IterMov, IterMut, IterRef}, number::bigint::BigInt}`
* Allow non type aliasing? => `use std::console::print`

Lambda.
* Use the `mut` symbol status from the original symbol in the capture.

Comp generic arguments.
* Think they're missing type checks.

Variants
* Ensure there are no borrows in the variant.

Tuples.
* Variant elements aren't compared.
* So a (USize, Opt[Str]) can't be matched by (USize, Some[Str]) at the moment.
